---
import TagInput from '../components/TagInput.astro';
---

<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulario con Tags</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
</head>
<body>
    <main class="container">
        <form id="mainForm" class="form-container">
            <h1>Añadir Ejercicio</h1>
            
            <div class="input-group">
                <label for="titulo">Título</label>
                <input 
                    type="text" 
                    id="titulo" 
                    name="titulo" 
                    placeholder="Ingresa el título"
                    required
                >
            </div>

            <div class="input-group">
                <label for="descripcion">Descripción</label>
                <textarea 
                    id="descripcion" 
                    name="descripcion" 
                    placeholder="Ingresa la descripción"
                    required
                ></textarea>
            </div>

            <div class="input-group">
                <label for="categoria">Categoría</label>
                <input 
                    type="text" 
                    id="categoria" 
                    name="categoria" 
                    placeholder="Ingresa la categoría"
                    required
                >
            </div>

            <div class="input-group">
                <label for="subcategoria">Subcategoría</label>
                <input 
                    type="text" 
                    id="subcategoria" 
                    name="subcategoria" 
                    placeholder="Ingresa la subcategoría (opcional)"
                >
            </div>

            <TagInput />

            <div class="form-row">
                <div class="input-group half">
                    <label for="duracion">Duración (min)</label>
                    <input 
                        type="number" 
                        id="duracion" 
                        name="duracion" 
                        placeholder="Duración en minutos"
                        min="0"
                        required
                    >
                </div>

                <div class="input-group half">
                    <label for="series">Número de Series</label>
                    <input 
                        type="number" 
                        id="series" 
                        name="series" 
                        placeholder="Número de series"
                        min="0"
                        required
                    >
                </div>
            </div>

            <div class="form-row">
                <div class="input-group half">
                    <label for="descanso">Descanso</label>
                    <input 
                        type="text" 
                        id="descanso" 
                        name="descanso" 
                        placeholder="Tiempo de descanso"
                        required
                    >
                </div>

                <div class="input-group half">
                    <label for="repeticiones">Nº de repeticiones</label>
                    <input 
                        type="number" 
                        id="repeticiones" 
                        name="repeticiones" 
                        placeholder="Número de repeticiones"
                        min="0"
                        required
                    >
                </div>
            </div>

            <div class="form-row">
                <div class="input-group half">
                    <label for="tiempo_repeticiones">Tiempo de repeticiones</label>
                    <input 
                        type="text" 
                        id="tiempo_repeticiones" 
                        name="tiempo_repeticiones" 
                        placeholder="Tiempo por repetición"
                        required
                    >
                </div>

                <div class="input-group half">
                    <label for="nivel">Nivel</label>
                    <select id="nivel" name="nivel" required>
                        <option value="">Selecciona un nivel</option>
                        <option value="principiante">Principiante</option>
                        <option value="intermedio">Intermedio</option>
                        <option value="avanzado">Avanzado</option>
                    </select>
                </div>
            </div>

            <div class="input-group checkbox-group">
                <label class="checkbox-container">
                    <input 
                        type="checkbox" 
                        id="visible_biblioteca" 
                        name="visible_biblioteca"
                    >
                    <span class="checkbox-label">Visible en biblioteca</span>
                </label>
            </div>

            <button type="submit" class="submit-btn">Guardar</button>
        </form>
    </main>

    <!-- Firebase SDK -->
    <script type="module">
        /**
         * @typedef {Object} EjercicioData
         * @property {string} titulo
         * @property {string} descripcion
         * @property {string} categoria
         * @property {string} subcategoria
         * @property {string[]} etiquetas
         * @property {number} duracion
         * @property {number} series
         * @property {string} descanso
         * @property {number} repeticiones
         * @property {string} tiempo_repeticiones
         * @property {string} nivel
         * @property {boolean} visible_biblioteca
         */

        // Import the functions you need from the SDKs you need
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
        import { getFirestore, collection, addDoc, serverTimestamp } 
            from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';

        // Configuración de Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyC_t90KXavBUApnR7EKHXye7Dotrka2q6w",
            authDomain: "testastro-ef0cd.firebaseapp.com",
            projectId: "testastro-ef0cd",
            storageBucket: "testastro-ef0cd.firebasestorage.app",
            messagingSenderId: "479309672007",
            appId: "1:479309672007:web:ece2a629c1b4883e938b62",
            measurementId: "G-XJEWD8V8H0"
        };

        // Inicializar Firebase
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        /**
         * Guarda un nuevo ejercicio en la base de datos
         * @param {EjercicioData} ejercicioData - Datos del ejercicio a guardar
         * @returns {Promise<string>} ID del documento creado
         */
        const guardarEjercicio = async (ejercicioData) => {
            try {
                const ejercicioCompleto = {
                    metadata: {
                        fechaCreacion: serverTimestamp(),
                        fechaActualizacion: serverTimestamp(),
                    },
                    ...ejercicioData,
                };

                const docRef = await addDoc(collection(db, 'ejercicios'), ejercicioCompleto);
                return docRef.id;
            } catch (error) {
                console.error('Error al guardar el ejercicio:', error);
                throw error;
            }
        };

        // Exponer la función globalmente para que el otro script pueda usarla
        window.guardarEjercicio = guardarEjercicio;
    </script>

    <!-- Script del formulario -->
    <script>
        /**
         * @typedef {Object} FormElements
         * @property {HTMLInputElement} titulo
         * @property {HTMLTextAreaElement} descripcion
         * @property {HTMLInputElement} categoria
         * @property {HTMLInputElement} subcategoria
         * @property {HTMLInputElement} duracion
         * @property {HTMLInputElement} series
         * @property {HTMLInputElement} descanso
         * @property {HTMLInputElement} repeticiones
         * @property {HTMLInputElement} tiempo_repeticiones
         * @property {HTMLSelectElement} nivel
         * @property {HTMLInputElement} visible_biblioteca
         */

        // Obtener elementos del DOM con las aserciones de tipo correctas
        /** @type {HTMLFormElement & { elements: FormElements }} */
        const mainForm = /** @type {HTMLFormElement} */ (document.getElementById('mainForm'));
        /** @type {HTMLDivElement} */
        const tagsContainer = /** @type {HTMLDivElement} */ (document.getElementById('tagsContainer'));

        if (!mainForm || !tagsContainer) {
            console.error('No se encontraron los elementos necesarios del formulario');
            throw new Error('Elementos del DOM no encontrados');
        }

        // Inicializar el array de tags
        /** @type {string[]} */
        let tags = [];

        // Escuchar cambios en los tags
        window.addEventListener('tagsChanged', (/** @type {CustomEvent} */ event) => {
            tags = [...event.detail];
            console.log('Tags actualizados:', tags);
        });

        /**
         * Valida que los campos requeridos tengan valor
         * @param {HTMLFormElement & { elements: FormElements }} form
         * @returns {string[]} Array con nombres de campos inválidos
         */
        function validateRequiredFields(form) {
            const requiredFields = [
                'titulo', 'descripcion', 'categoria', 'duracion',
                'series', 'descanso', 'repeticiones', 'tiempo_repeticiones', 'nivel'
            ];

            return requiredFields.filter(field => {
                const element = form.elements[field];
                return !element.value.trim();
            });
        }

        /**
         * Convierte un valor a número, con valor mínimo de 0
         * @param {string} value
         * @returns {number}
         */
        function toPositiveNumber(value) {
            return Math.max(0, parseInt(value) || 0);
        }

        // Función para manejar el envío del formulario
        mainForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Validar campos requeridos
            const invalidFields = validateRequiredFields(mainForm);
            if (invalidFields.length > 0) {
                alert(`Por favor, complete los siguientes campos: ${invalidFields.join(', ')}`);
                return;
            }

            // Recoger los valores del formulario
            const formData = {
                titulo: mainForm.elements.titulo.value.trim(),
                descripcion: mainForm.elements.descripcion.value.trim(),
                categoria: mainForm.elements.categoria.value.trim(),
                subcategoria: mainForm.elements.subcategoria.value.trim(),
                etiquetas: [...tags],
                duracion: toPositiveNumber(mainForm.elements.duracion.value),
                series: toPositiveNumber(mainForm.elements.series.value),
                descanso: mainForm.elements.descanso.value.trim(),
                repeticiones: toPositiveNumber(mainForm.elements.repeticiones.value),
                tiempo_repeticiones: mainForm.elements.tiempo_repeticiones.value.trim(),
                nivel: mainForm.elements.nivel.value,
                visible_biblioteca: mainForm.elements.visible_biblioteca.checked
            };

            try {
                // Guardar el ejercicio
                const id = await window.guardarEjercicio(formData);
                console.log('Ejercicio guardado con ID:', id);
                alert('Ejercicio guardado correctamente');
                
                // Resetear el formulario y los tags
                mainForm.reset();
                tags = [];
                tagsContainer.innerHTML = '';
            } catch (error) {
                console.error('Error al guardar el ejercicio:', error);
                alert('Error al guardar el ejercicio. Por favor, inténtelo de nuevo.');
            }
        });
    </script>

    <style>
        :root {
            --primary-color: #3B82F6;
            --primary-hover: #2563EB;
            --background-color: #F3F4F6;
            --border-color: #E5E7EB;
            --text-color: #1F2937;
            --error-color: #EF4444;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.5;
        }

        .container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .form-container {
            background-color: white;
            padding: 2rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        h1 {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: var(--text-color);
        }

        .input-group {
            margin-bottom: 1rem;
        }

        .form-row {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .half {
            flex: 1;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-color);
        }

        input[type="text"],
        input[type="number"],
        textarea,
        select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 0.375rem;
            font-size: 1rem;
            color: var(--text-color);
        }

        textarea {
            min-height: 100px;
            resize: vertical;
        }

        input:focus,
        textarea:focus,
        select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .checkbox-group {
            margin-top: 1rem;
        }

        .checkbox-container {
            display: flex;
            align-items: center;
            cursor: pointer;
        }

        input[type="checkbox"] {
            margin-right: 0.5rem;
        }

        .checkbox-label {
            font-weight: 400;
        }

        .submit-btn {
            background-color: var(--primary-color);
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.375rem;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            width: 100%;
            margin-top: 1rem;
            transition: background-color 0.2s;
        }

        .submit-btn:hover {
            background-color: var(--primary-hover);
        }

        @media (max-width: 640px) {
            .form-row {
                flex-direction: column;
                gap: 0;
            }

            .form-container {
                padding: 1.5rem;
            }
        }
    </style>
</body>
</html>