---
import TagInput from '../components/TagInput.astro';
---

<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulario con Tags</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
</head>
<body>
    <main class="container">
        <form id="mainForm" class="form-container">
            <h1>Añadir Ejercicio</h1>
            
            <div class="input-group">
                <label for="titulo">Título</label>
                <input 
                    type="text" 
                    id="titulo" 
                    name="titulo" 
                    placeholder="Ingresa el título"
                    required
                >
            </div>

            <div class="input-group">
                <label for="descripcion">Descripción</label>
                <textarea 
                    id="descripcion" 
                    name="descripcion" 
                    placeholder="Ingresa la descripción"
                    required
                ></textarea>
            </div>

            <div class="input-group">
                <label for="categoria">Categoría</label>
                <input 
                    type="text" 
                    id="categoria" 
                    name="categoria" 
                    placeholder="Ingresa la categoría"
                    required
                >
            </div>

            <div class="input-group">
                <label for="subcategoria">Subcategoría</label>
                <input 
                    type="text" 
                    id="subcategoria" 
                    name="subcategoria" 
                    placeholder="Ingresa la subcategoría (opcional)"
                >
            </div>

            <TagInput />

            <div class="form-row">
                <div class="input-group half">
                    <label for="duracion">Duración (min)</label>
                    <input 
                        type="number" 
                        id="duracion" 
                        name="duracion" 
                        placeholder="Duración en minutos"
                        min="0"
                        required
                    >
                </div>

                <div class="input-group half">
                    <label for="series">Número de Series</label>
                    <input 
                        type="number" 
                        id="series" 
                        name="series" 
                        placeholder="Número de series"
                        min="0"
                        required
                    >
                </div>
            </div>

            <div class="form-row">
                <div class="input-group half">
                    <label for="descanso">Descanso</label>
                    <input 
                        type="text" 
                        id="descanso" 
                        name="descanso" 
                        placeholder="Tiempo de descanso"
                        required
                    >
                </div>

                <div class="input-group half">
                    <label for="repeticiones">Nº de repeticiones</label>
                    <input 
                        type="number" 
                        id="repeticiones" 
                        name="repeticiones" 
                        placeholder="Número de repeticiones"
                        min="0"
                        required
                    >
                </div>
            </div>

            <div class="form-row">
                <div class="input-group half">
                    <label for="tiempo_repeticiones">Tiempo de repeticiones</label>
                    <input 
                        type="text" 
                        id="tiempo_repeticiones" 
                        name="tiempo_repeticiones" 
                        placeholder="Tiempo por repetición"
                        required
                    >
                </div>

                <div class="input-group half">
                    <label for="nivel">Nivel</label>
                    <select id="nivel" name="nivel" required>
                        <option value="">Selecciona un nivel</option>
                        <option value="principiante">Principiante</option>
                        <option value="intermedio">Intermedio</option>
                        <option value="avanzado">Avanzado</option>
                    </select>
                </div>
            </div>

            <div class="input-group checkbox-group">
                <label class="checkbox-container">
                    <input 
                        type="checkbox" 
                        id="visible_biblioteca" 
                        name="visible_biblioteca"
                    >
                    <span class="checkbox-label">Visible en biblioteca</span>
                </label>
            </div>

            <button type="submit" class="submit-btn">Guardar</button>
        </form>
    </main>

    <!-- Firebase SDK -->
    <script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
        import { getFirestore, collection, addDoc, serverTimestamp } 
            from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';

        // Configuración de Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyC_t90KXavBUApnR7EKHXye7Dotrka2q6w",
            authDomain: "testastro-ef0cd.firebaseapp.com",
            projectId: "testastro-ef0cd",
            storageBucket: "testastro-ef0cd.firebasestorage.app",
            messagingSenderId: "479309672007",
            appId: "1:479309672007:web:ece2a629c1b4883e938b62",
            measurementId: "G-XJEWD8V8H0"
        };

        // Inicializar Firebase
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        // Función para guardar ejercicio
        const guardarEjercicio = async (ejercicioData) => {
            try {
                const ejercicioCompleto = {
                    metadata: {
                        fechaCreacion: serverTimestamp(),
                        fechaActualizacion: serverTimestamp(),
                    },
                    ...ejercicioData,
                };

                const docRef = await addDoc(collection(db, 'ejercicios'), ejercicioCompleto);
                return docRef.id;
            } catch (error) {
                console.error('Error al guardar el ejercicio:', error);
                throw error;
            }
        };

        // Exponer la función globalmente para que el otro script pueda usarla
        window.guardarEjercicio = guardarEjercicio;
    </script>

    <!-- Script del formulario -->
    <script>
        const mainForm = document.getElementById('mainForm');
        const tagsContainer = document.getElementById('tagsContainer');
        let tags = [];

        // Manejar el envío del formulario
        mainForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData(e.target);
            
            const ejercicioData = {
                informacionBasica: {
                    titulo: formData.get('titulo'),
                    descripcion: formData.get('descripcion'),
                    categoria: formData.get('categoria'),
                    subcategoria: formData.get('subcategoria') || '',
                },
                etiquetas: tags,
                configuracionEjercicio: {
                    duracion: parseInt(formData.get('duracion')),
                    series: parseInt(formData.get('series')),
                    descanso: formData.get('descanso'),
                    repeticiones: parseInt(formData.get('repeticiones')),
                    tiempoRepeticiones: formData.get('tiempo_repeticiones'),
                },
                configuracionAvanzada: {
                    nivel: formData.get('nivel'),
                    visibleEnBiblioteca: formData.get('visible_biblioteca') === 'on',
                },
            };

            try {
                const docId = await window.guardarEjercicio(ejercicioData);
                alert('Ejercicio guardado correctamente');
                e.target.reset();
                tags = [];
                tagsContainer.innerHTML = '';
            } catch (error) {
                console.error('Error al guardar:', error);
                alert('Error al guardar el ejercicio');
            }
        });
    </script>

    <style>
        :root {
            --primary-color: #2563eb;
            --background-color: #f8fafc;
            --text-color: #1e293b;
            --border-color: #e2e8f0;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: grid;
            place-items: center;
        }

        .container {
            width: 100%;
            max-width: 800px;
            padding: 2rem;
        }

        .form-container {
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
        }

        h1 {
            margin-bottom: 2rem;
            font-size: 1.875rem;
            color: var(--text-color);
            text-align: center;
        }

        .input-group {
            margin-bottom: 1.5rem;
        }

        .form-row {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .half {
            flex: 1;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-color);
        }

        input, textarea, select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            font-size: 1rem;
            color: var(--text-color);
        }

        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        textarea {
            min-height: 100px;
            resize: vertical;
        }

        .checkbox-container {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        input[type="checkbox"] {
            width: auto;
        }

        .checkbox-label {
            margin: 0;
        }

        .submit-btn {
            width: 100%;
            padding: 0.75rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .submit-btn:hover {
            background-color: #1d4ed8;
        }

        @media (max-width: 640px) {
            .form-row {
                flex-direction: column;
            }

            .half {
                width: 100%;
            }
        }
    </style>
</body>
</html>