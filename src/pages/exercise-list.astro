---
import BaseLayout from '../layouts/BaseLayout.astro';
import ExerciseCard from '../components/ExerciseCard.astro';
import { getAllExercises } from '../services/exerciseService';
import type { Exercise } from '../types/Exercise';

// Obtener los ejercicios en el servidor
const exercises = await getAllExercises();

// Ordenar los ejercicios alfabéticamente por título
const sortedExercises = [...exercises].sort((a, b) => 
    ((a.title || '') + '').localeCompare(((b.title || '') + ''))
);
---

<BaseLayout title="Lista de Ejercicios - Crusxly Admin">
    <div class="exercise-container">
        <header class="page-header">
            <div class="header-content">
                <h1>Lista de Ejercicios</h1>
                <a href="/add-exercise" class="add-button">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="icon">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    Añadir Ejercicio
                </a>
            </div>
            <a href="/" class="back-button">
                <span>←</span> Volver
            </a>
        </header>

        <div id="exercise-list-container">
            {exercises.length === 0 ? (
                <div class="empty-state">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="empty-icon">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                    </svg>
                    <p>Comienza añadiendo tu primer ejercicio</p>
                    <a href="/add-exercise" class="add-button">Añadir Ejercicio</a>
                </div>
            ) : (
                <div class="exercise-grid">
                    {sortedExercises.map((exercise) => (
                        <ExerciseCard 
                            id={exercise.id} 
                            title={exercise.title || 'Sin título'} 
                            description={exercise.description || 'Sin descripción'} 
                            category={exercise.category || 'Sin categoría'} 
                        />
                    ))}
                </div>
            )}
        </div>
    </div>
</BaseLayout>

<script>
    import { deleteExercise, subscribeToExercises } from '../services/exerciseService';
    import type { Exercise } from '../types/Exercise';
    
    // Configurar los botones de eliminar
    function setupDeleteButtons(): void {
        document.querySelectorAll('.action-button.delete').forEach(button => {
            button.addEventListener('click', async (event) => {
                event.preventDefault();
                const deleteButton = event.currentTarget as HTMLButtonElement;
                const id = deleteButton.getAttribute('data-id');
                if (id && confirm('¿Estás seguro de que deseas eliminar este ejercicio?')) {
                    try {
                        await deleteExercise(id);
                        console.log('Ejercicio eliminado con éxito');
                        // Eliminar la tarjeta del DOM en lugar de recargar la página
                        const card = deleteButton.closest('.exercise-card');
                        if (card && card.parentElement) {
                            card.parentElement.removeChild(card);
                        }
                    } catch (error) {
                        console.error('Error al eliminar el ejercicio:', error);
                        alert('Error al eliminar el ejercicio. Por favor, inténtalo de nuevo.');
                    }
                }
            });
        });
    }
    
    // Función para actualizar la UI con los nuevos ejercicios
    function updateExerciseList(exercises: Exercise[]): void {
        // Solo actualizar si hay cambios significativos
        // Esta implementación básica evita recargas constantes
        console.log('Cambios detectados en los ejercicios');
        // Aquí podrías implementar una actualización más sofisticada
        // sin necesidad de recargar la página
    }
    
    // Esperar a que el DOM esté completamente cargado
    document.addEventListener('DOMContentLoaded', () => {
        // Configurar los botones de eliminar
        setupDeleteButtons();
        
        // Suscribirse a cambios en tiempo real pero sin recargar la página
        const unsubscribe = subscribeToExercises(updateExerciseList);
        
        // Limpiar la suscripción cuando se desmonte el componente
        window.addEventListener('beforeunload', () => {
            if (unsubscribe) unsubscribe();
        });
    });
</script>

<style>
    .exercise-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .page-header {
        margin-bottom: 2rem;
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    h1 {
        font-size: 2rem;
        color: var(--text-color);
        margin: 0;
    }

    .back-button {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background-color: var(--background-color);
        border: 1px solid var(--border-color);
        border-radius: 0.5rem;
        color: var(--text-color);
        text-decoration: none;
    }

    .back-button:hover {
        background-color: var(--hover-color);
    }

    .add-button {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background-color: var(--primary-color);
        border: none;
        border-radius: 0.5rem;
        color: white;
        font-weight: 500;
        text-decoration: none;
        transition: background-color 0.2s ease;
    }

    .add-button:hover {
        background-color: var(--primary-hover);
    }

    .icon {
        width: 1.25rem;
        height: 1.25rem;
    }

    .exercise-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .empty-state,
    .error-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem;
        text-align: center;
        background-color: white;
        border-radius: 1rem;
        border: 1px solid var(--border-color);
    }

    .empty-icon,
    .error-icon {
        width: 4rem;
        height: 4rem;
        color: var(--text-color);
        opacity: 0.5;
        margin-bottom: 1rem;
    }

    .reload-button {
        margin-top: 1rem;
        padding: 0.5rem 1rem;
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 0.5rem;
        cursor: pointer;
    }

    .reload-button:hover {
        background-color: var(--primary-hover);
    }
</style>